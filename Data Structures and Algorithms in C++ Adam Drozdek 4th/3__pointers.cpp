int main()
{
  int i = 15, j, *p, *q;
  // переменная p должна хранить адрес, а не значение, поэтому
  // присваивая ей значение 15, мы говорим что теперь в ней лежит адрес 15
  // на данный момент это абсолютно бессмысленно
  p = (int *)i;
  // поэтому нужно сделать другую операцию, операцию взятия адреса
  // после этого в ней будет лежать адрес переменной i, а не само число 15
  p = &i;
  // но pointer переменные тоже должны хранить свое значение по какому-то адресу, следует это помнить.

  // также мы можем другим путем попросить выделить столько памяти сколько нам нужно
  // для одной переменной типа int
  p = new int;
  // данная инструкция ОЧИСТИТ данные которые отвечали за данные в i,
  // но сам адрес на них останется храниться в переменной p
  delete p;
  // эта ситуация очень опасна, потому что это как ссылаться на адрес снесенного дома
  // но дома уже нет, от него остались одни камешки, мы больше не можем там жить
  // поэтому нам нужно также удалить адрес просто написав
  p = nullptr;
  p = new int;
  p = new int;
  p = new int;
  delete p;
  p = new int;
  // выше приведен пример memory leak. это когда мы выделяем память
  // но потом теряем ссылку на нее, а потом выделяем еще, а потом снова теряем ссылку на нее
}